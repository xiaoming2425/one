package cn.wewintech.activiti.controller;

import cn.wewintech.activiti.service.ActTaskService;
import cn.wewintech.activiti.vo.ProcessVO;
import cn.wewintech.activiti.vo.TaskVO;
import cn.wewintech.common.utils.PageUtils;
import org.activiti.engine.FormService;
import org.activiti.engine.HistoryService;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.history.HistoricProcessInstance;
import org.activiti.engine.history.HistoricVariableInstance;
import org.activiti.engine.history.HistoricVariableInstanceQuery;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.runtime.ExecutionQuery;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.apache.ibatis.javassist.expr.NewArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/**

 */
@RequestMapping("activiti/task")
@RestController
public class TaskController {
    @Autowired
    RepositoryService repositoryService;
    @Autowired
    FormService formService;
    @Autowired
    TaskService taskService;
    @Autowired
    ActTaskService actTaskService;
    @Autowired
    RuntimeService RuntimeService;
    @Autowired
    HistoryService historyService;
    @GetMapping("goto")
    public ModelAndView gotoTask(){
        return new ModelAndView("act/task/gotoTask");
    }

    @GetMapping("/gotoList")
    PageUtils list(int offset, int limit) {
        List<ProcessDefinition> processDefinitions = repositoryService.createProcessDefinitionQuery()
                .listPage(offset, limit);
        int count = (int) repositoryService.createProcessDefinitionQuery().count();
        List<Object> list = new ArrayList<>();
        for(ProcessDefinition processDefinition: processDefinitions){
            list.add(new ProcessVO(processDefinition));
        }

        PageUtils pageUtils = new PageUtils(list, count);
        return pageUtils;
    }

    @GetMapping("/form/{procDefId}")
    public void startForm(@PathVariable("procDefId") String procDefId  ,HttpServletResponse response) throws IOException {
        String formKey = actTaskService.getFormKey(procDefId, null);
        response.sendRedirect(formKey);
    }

    @GetMapping("/form/{procDefId}/{taskId}/{executionId}")
    public void form(@PathVariable("procDefId") String procDefId,@PathVariable("taskId") String taskId ,
    		@PathVariable("executionId") String executionId,HttpServletResponse response) throws IOException {
        // 获取流程XML上的表单KEY

        String formKey = actTaskService.getFormKey(procDefId, taskId);
      String processInstanceId = RuntimeService.createExecutionQuery().executionId(executionId).singleResult().getProcessInstanceId();
      String id = RuntimeService.createProcessInstanceQuery().processInstanceId(processInstanceId).singleResult().getBusinessKey();

        response.sendRedirect(formKey+"/"+taskId+"/"+processInstanceId+"/"+id);
    }
    
    @GetMapping("/pointSelect/{procDefId}/{businessId}/{executionId}")
    public ModelAndView pointSelect(@PathVariable("procDefId") String procDefId,@PathVariable("businessId") String businessId ,
    		@PathVariable("executionId") String executionId,HttpServletResponse response,ModelAndView model) {
        // 获取流程XML上的表单KEY
    	 List<ProcessVO> list = new ArrayList<>();
    	List<HistoricVariableInstance> listHis = historyService.createHistoricVariableInstanceQuery().executionId(executionId).variableName("auditMsg").list();
    	for (HistoricVariableInstance historicVariableInstance : listHis) {
			list.add(new ProcessVO(historicVariableInstance));
		}
    	List<Task> list2 = taskService.createTaskQuery().executionId(executionId).list();
    	String assignName="";
    	for (Task task : list2) {
			String assignee = task.getAssignee();
			assignName+="  "+assignee;
		}
    	ProcessInstance singleResult = RuntimeService.createProcessInstanceQuery().processInstanceBusinessKey(businessId).singleResult();
       if (null==singleResult) {
		assignName="审核流程结束!";
	}
     
       model.addObject("list", list);
       model.addObject("assignName", assignName);
       model.setViewName("act/task/pointSelect");
       return model;
    }

    @GetMapping("/todo")
    ModelAndView todo(){
        return new ModelAndView("act/task/todoTask");
    }

    @GetMapping("/todoList")
    List<TaskVO> todoList(){
        List<Task> tasks = taskService.createTaskQuery().taskAssignee("admin").list();
        List<TaskVO> taskVOS =  new ArrayList<>();
        for(Task task : tasks){
            TaskVO taskVO = new TaskVO(task);
            taskVOS.add(taskVO);
        }
        return taskVOS;
    }


    /**
     * 读取带跟踪的图片
     */
    @RequestMapping(value = "/trace/photo/{procDefId}/{execId}")
    public void tracePhoto(@PathVariable("procDefId") String procDefId, @PathVariable("execId") String execId, HttpServletResponse response) throws Exception {
        InputStream imageStream = actTaskService.tracePhoto(procDefId, execId);

        // 输出资源内容到相应对象
        byte[] b = new byte[1024];
        int len;
        while ((len = imageStream.read(b, 0, 1024)) != -1) {
            response.getOutputStream().write(b, 0, len);
        }
    }


    
    @GetMapping("/historyTask")
    PageUtils historyTask(int offset, int limit) {
        List<ProcessVO> list = new ArrayList<>();
 
        List<HistoricProcessInstance> listPage = historyService.createHistoricProcessInstanceQuery().orderByProcessInstanceStartTime().desc().listPage(offset, limit);
        int count = (int)historyService.createHistoricVariableInstanceQuery().count();
        for (HistoricProcessInstance his : listPage) {
        	  HistoricVariableInstance singleResult = historyService.createHistoricVariableInstanceQuery().executionId(his.getId()).variableName("title").singleResult();
        	list.add(new ProcessVO(his,singleResult.getValue().toString()));
		}
      
        
        PageUtils pageUtils = new PageUtils(list, count);
        return pageUtils;
    }
}
